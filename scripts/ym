#!/usr/bin/env python

import os
import sys
import re
from os.path import expanduser, join
from typing import List, Optional, Dict, Tuple
from mutagen.easyid3 import EasyID3
from yt_dlp import YoutubeDL, DownloadError

MUSIC_DIR = "~/music"
VA = "Various Artists"
ALBUM = "General"

# Precompiled regex patterns for efficiency
PATTERN_INDEX = re.compile(r'^(\d+)\s.+\.mp3$')
PATTERN_NORMALIZE = re.compile(r'^(\d+)(\s.+\.mp3)$')
PATTERN_SLASHES = re.compile(r'[\\/]')

def sanitize(name: str) -> str:
    """Replace slashes with underscores and strip whitespace."""
    return PATTERN_SLASHES.sub('_', name.strip())

def get_directory_data(song_dir: str) -> Tuple[List[int], Dict[str, str]]:
    """
    Scan directory once and return:
    - Sorted list of existing indices
    - Mapping of (artist - title) to index (lowercase keys)
    """
    indices = []
    name_to_index = {}

    for fname in os.listdir(song_dir):
        match = PATTERN_INDEX.match(fname)
        if match:
            index = match.group(1)
            indices.append(int(index))

            # Extract artist-title portion case-insensitively
            name_part = fname[len(index)+1:-4].lower()
            name_to_index[name_part] = index

    return sorted(indices), name_to_index

def find_next_index(existing_indices: List[int]) -> int:
    """Find the smallest missing index in sorted list."""
    if not existing_indices:
        return 1
    max_index = existing_indices[-1]

    # No gaps
    if len(existing_indices) == max_index:
        return max_index + 1

    # Find first gap
    return next(i for i in range(1, max_index+2) if i not in existing_indices)

def normalize_filenames(song_dir: str, width: int) -> None:
    """Rename files to consistent zero-padded width."""
    for fname in os.listdir(song_dir):
        match = PATTERN_NORMALIZE.match(fname)
        if match:
            old_index, rest = match.groups()
            new_index = f"{int(old_index):0{width}}"
            new_name = f"{new_index}{rest}"
            if fname != new_name:
                os.rename(
                    join(song_dir, fname),
                    join(song_dir, new_name)
                )

def download_song(url: str, out_path: str) -> None:
    """Download audio and convert to MP3 with error handling."""
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': out_path,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'quiet': False,
        'no_warnings': True
    }
    try:
        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        return True
    except DownloadError as e:
        print(f"Download failed: {str(e).split(';')[0]}")
        # Clean up partial files
        if os.path.exists(out_path + '.mp3'):
            os.remove(out_path + '.mp3')
        return False

def add_id3_tags(filepath: str, index: int, composer: str,
                 artist: str, album: str, title: str) -> None:
    """Add ID3 tags."""
    audio = EasyID3(filepath)
    audio['tracknumber'] = [str(index)]
    audio['composer'] = [composer]
    audio['artist'] = [artist]
    audio['album'] = [album]
    audio['title'] = [title]
    audio.save()

def main() -> None:
    if len(sys.argv) != 4:
        print('Usage: ym "Artist Name" "Song Title" "URL"')
        sys.exit(1)

    # Parse the arguments
    artist = sanitize(sys.argv[1])
    title = sanitize(sys.argv[2])
    url = sys.argv[3].split('&', 1)[0]

    # Output directory setup
    base_dir = expanduser(f"{MUSIC_DIR}/{VA}/{ALBUM}")
    os.makedirs(base_dir, exist_ok=True)

    # Single directory scan for both indices and name mapping
    existing_indices, name_map = get_directory_data(base_dir)

    # Check for duplicates using normalized name
    normalized_name = f"{artist} - {title}".lower()
    if normalized_name in name_map:
        print(f"Duplicate index: {name_map[normalized_name]}.")
        sys.exit(1)

    # Determine next index and padding width
    new_index = find_next_index(existing_indices)
    last_digit_width = len(str(existing_indices[-1]))
    new_digit_width = max(last_digit_width, len(str(new_index)))

    # Normalize the indices of all filenames
    if existing_indices and last_digit_width < new_digit_width:
        normalize_filenames(base_dir, new_digit_width)

    # Construct final filename and path
    filename = f"{new_index:0{new_digit_width}} {artist} - {title}.mp3"
    filepath = join(base_dir, filename.replace('"', "'"))

    # Download the song
    print(f"Downloading to {filename}...")
    if not download_song(url, filepath[:-4]):
        sys.exit(1)

    # Add ID3 tags with proper artist mapping
    print("Adding ID3 tags...")
    add_id3_tags(
        filepath=filepath,
        index=new_index,
        composer=artist,
        artist=VA,
        album=ALBUM,
        title=title
    )

    print(f"{filename}")

if __name__ == "__main__":
    main()
