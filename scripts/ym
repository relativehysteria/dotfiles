#!/usr/bin/env python

from sys import argv
from os.path import expanduser
from os import listdir, rename
from concurrent.futures import ThreadPoolExecutor
import yt_dlp
from mutagen.easyid3 import EasyID3

# Path to the general directory and all of the songs within it
gen = expanduser("~/music/Various Artists/General")
songs = sorted(listdir(gen), reverse=True)

if len(argv) == 1:
    print(f"{argv[0]} <url> <artist> <song_title> [index]")
    exit()

# Based on the last song in the directory, get the index of the song we are
# about to add
try:
    lstnum = int(iter(songs).__next__().split()[0])
except:
    lstnum = 0
finally:
    curnum = lstnum + 1

# Get the arguments

# If we got an index as well, change the curnum
if len(argv) > 4:
    # Make sure it's a number
    idx = int(argv[4])

    # It mustn't be larger than the one that we have right now or smaller than 0
    if idx > curnum or idx < 1:
        print("Incorrect index.")
        exit(1)

    # And make sure the padding won't get fucked, e.g. if the index is 0000001
    if len(str(curnum)) - len(argv[4]) < 0:
        print("Don't pad your index.")
        exit(1)

    # Zero pad the index
    padding = '0' * (len(str(curnum)) - len(argv[4]))
    curnum  = padding + argv[4]

url     = argv[1].split('&')[0]
name    = f"{curnum} {argv[2]} - {argv[3]}"
outfile = f"{gen}/{name}"

# Make sure there's no duplicates
for song in songs:
    # Get rid of ".mp3" and the index
    song_name = ' '.join(song[:-4].split()[1:])

    # If the names match, this is a duplicate.
    if song_name.lower() == f"{argv[2]} - {argv[3]}".lower():
        print(f"Duplicate ({song.split()[0]}).")
        exit()

# If the current index would have more digits than the last one,
# we have to rename every single file and start the old ones with a trailing '0'
if len(str(curnum)) > len(str(lstnum)):
    with ThreadPoolExecutor(max_workers=10) as exe:
        for song in songs:
            exe.submit(rename, f"{gen}/{song}", f"{gen}/0{song}")

# Options for yt-dlp; mp3 format for everything
ydl_opts = {
    "format": "bestaudio/best",
    "outtmpl": outfile,
    "postprocessors": [{
        "key": "FFmpegExtractAudio",
        "preferredcodec": "mp3",
        "preferredquality": "192",
    }],
}

# Download the song
with yt_dlp.YoutubeDL(ydl_opts) as ydl:
    ydl.download([url])

# Add ID3 tags to it
song = EasyID3(f"{outfile}.mp3")
song["tracknumber"] = [str(curnum)]
song["composer"]    = [argv[2]]
song["artist"]      = "Various Artists"
song["album"]       = "General"
song["title"]       = [argv[3]]
song.save()
